<?php
// $Id: cck_country.module,v 1.1.2.2 2011/01/29 21:44:51 scyther Exp $

/**
 * @file
 * A CCK content field which lets you add a country to your content types;
 * displaying country name, ISO 3166-1 alpha-2 code, ISO 3166-1 alpha-3 code or
 * a countryicon with module Country Icons.
 */

/**
 * Implementation of hook_theme().
 */
function cck_country_theme() {
  $themes = array(
    'cck_country_select' => array(
      'arguments' => array('element' => NULL),
    ),
    'cck_country_formatter_default' => array(
      'arguments' => array('element' => NULL),
      'file' => 'cck_country_formatter.inc',
    ),
    'cck_country_formatter_code2' => array(
      'arguments' => array('element' => NULL),
      'file' => 'cck_country_formatter.inc',
    ),
    'cck_country_formatter_code3' => array(
      'arguments' => array('element' => NULL),
      'file' => 'cck_country_formatter.inc',
    ),
  );

  if (module_exists('countryicons')) {
    foreach (countryicons_get_iconsets() as $iconsets) {
      $themes['cck_country_formatter_' . $iconsets['name'] . '_image'] = array(
        'arguments' => array('element' => NULL),
        'function' => 'theme_cck_country_formatter_countryicons_image',
        'file' => 'cck_country_formatter.inc',
      );
      $themes['cck_country_formatter_' . $iconsets['name'] . '_sprite'] = array(
        'arguments' => array('element' => NULL),
        'function' => 'theme_cck_country_formatter_countryicons_sprite',
        'file' => 'cck_country_formatter.inc',
      );
    }
  }

  return $themes;
}

/**
 * Implementation of hook_elements().
 */
function cck_country_elements() {
  return array(
    'cck_country_select' => array(
      '#input' => TRUE,
      '#columns' => array('value'),
      '#delta' => 0,
      '#process' => array('cck_country_select_process'),
      '#autocomplete_path' => FALSE,
      '#element_validate' => array('optionwidgets_validate'),
    ),
  );
}

/**
 * Implementation of hook_field_info().
 */
function cck_country_field_info() {
  return array(
    'cck_country' => array('label' => 'Country'),
  );
}

/**
 * Implementation of hook_field_formatter_info().
 */
function cck_country_field_formatter_info() {
  $formatters = array(
    'default' => array(
      'label' => 'Country name',
      'field types' => array('cck_country'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'code2' => array(
      'label' => '2-digit country code',
      'field types' => array('cck_country'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'code3' => array(
      'label' => '3-digit country code',
      'field types' => array('cck_country'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );

  if (module_exists('countryicons')) {
    foreach (countryicons_get_iconsets() as $iconsets) {
      $formatters[$iconsets['name'] . '_image'] = array(
        'label' => t('countryicons @iconset image', array('@iconset' => $iconsets['name'])),
        'field types' => array('cck_country'),
        'multiple values' => CONTENT_HANDLE_CORE,
      );
      $formatters[$iconsets['name'] . '_sprite'] = array(
        'label' => t('countryicons @iconset sprite', array('@iconset' => $iconsets['name'])),
        'field types' => array('cck_country'),
        'multiple values' => CONTENT_HANDLE_CORE,
      );
    }
  }

  return $formatters;
}

/**
 * Implementation of hook_field_settings().
 */
function cck_country_field_settings($op, $field) {
  if ($op == 'database columns' && $field['type'] == 'cck_country') {
    return array(
      'value' => array('type' => 'varchar', 'length' => 2, 'not null' => FALSE),
    );
  }

  // @todo
  // $op == 'views data'
}

/**
 * Implementation of hook_widget_info().
 */
function cck_country_widget_info() {
  return array(
    'cck_country_select' => array(
      'label' => 'Select List',
      'field types' => array('cck_country'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of hook_widget().
 */
function cck_country_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => !empty($items) ? $items : array(),
  );
  return $element;
}

/**
 * Implementation of hook_content_is_empty().
 */
function cck_country_content_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Helper function for finding the allowed values list for a cck_country field.
 *
 * @param $field
 *   The field whose allowed values are requested.
 * @param $flatten
 *   NOT IN USE YET!
 *   Optional. Use TRUE to return a flattened array (default).
 *   FALSE can be used to support optgroups for select widgets
 *   when allowed values list is generated using PHP code.
 */
function cck_country_options($field, $flatten = TRUE) {
  $options = cck_country_allowed_values();
  if (!$field['required']) {
    $options = array('' => t('- None -')) + $options;
  }
  return $options;
}

/**
 * Allowed values for cck_country_select.
 *
 * @return
 *   array with 2-digit country code as KEY and name as VALUE.
 */
function cck_country_allowed_values() {
  return countries_api_get_array();
}

/**
 * Procces the element cck_country_select.
 */
function cck_country_select_process($element, $edit, &$form_state, $form) {
  $field_name = $element['#field_name'];
  $field = $form['#field_info'][$field_name];
  $field_key = $element['#columns'][0];

  if (is_array($element['#value']) && !array_key_exists($field_key, $element['#value'])) {
    $element['#value'] = optionwidgets_data2form($element, $element['#default_value'], $field);
  }

  $element[$field_key] = array(
    '#type' => 'select',
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => isset($element['#required']) ? $element['#required'] : $field['required'],
    '#multiple' => isset($element['#multiple']) ? $element['#multiple'] : $field['multiple'],
    '#options' => cck_country_options($field, FALSE),
    '#default_value' => isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : NULL,
  );


  // Make sure field info will be available to the validator which
  // does not get the values in $form.

  // TODO for some reason putting the $field array into $form_state['storage']
  // causes the node's hook_form_alter to be invoked twice, garbling the
  // results. Need to investigate why that is happening (a core bug?), but
  // in the meantime avoid using $form_state['storage'] to store anything.
  $form_state['#field_info'][$field['field_name']] = $field;

  return $element;
}

/**
 * Theme the element cck_country_select.
 */
function theme_cck_country_select($element) {
  return $element['#children'];
}
