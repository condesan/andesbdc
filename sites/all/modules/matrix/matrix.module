<?php
// $Id: matrix.module,v 1.2.4.8.2.10 2009/04/26 07:32:32 aaron1234nz Exp $

/**
 * @file
 * Defines simple matrix field types.
 */

/**
 * Implementation of hook_menu().
 */
function matrix_menu() {
  $items['matrix/export/%/%'] = array( //nid, field_name
    'title' => 'Export callback for matrix',
    'page callback' => 'matrix_export',
    'page arguments' => array(2, 3),
    'access arguments' => array('export matrix'),
    'type' => MENU_CALLBACK,
  );
  $items['matrix/reorder'] = array(
    'title' => 'Menu callback for saving the reorder of elements events',
    'page callback' => 'matrix_settings_reorder_save',
    'access arguments' => array('export matrix'),
    'file' => 'admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['matrix/throbber'] = array(
    'title' => 'Menu callback for the settings form',
    'page callback' => 'matrix_settings_throbber_callback',
    'access arguments' => array('export matrix'),
    'file' => 'admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['matrix/throbber/save'] = array(
    'title' => 'Menu callback saving a new element',
    'page callback' => 'matrix_settings_throbber_save',
    'access arguments' => array('export matrix'),
    'file' => 'admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['matrix/throbber/delete'] = array(
    'title' => 'Menu callback deleting an element',
    'page callback' => 'matrix_settings_throbber_delete',
    'access arguments' => array('export matrix'),
    'file' => 'admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['matrix/example'] = array(
    'title' => 'Example use of matrix as a form element',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('matrix_example'),
    'access arguments' => array('export matrix'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Prepare default values for the admin interface
 * @param $item string either "list" (the visible part) or "data" (the hidden elememt part)
 * @param $field_name string the name of the CCK field
 * @param $rc string either "rows" or "cols"
 * @param $field_data the field data
 *
 * @return Either the formatted list of elements or serialized elements
 */
function matrix_settings_default($item, $field_name, $rc, $field_data) {
  $elements = unserialize($field_data);
  
  if ($item == 'list') {
    $list = theme('matrix_settings_list', $elements, $rc);
    return !empty($elements) ? $list : $list . t('please add an element');
  }
  elseif ($item == 'data') {
    return $field_data;
  }
}

/**
 * Implementation of hook_perm().
 */
function matrix_perm() {
  return array('export matrix');
}

/**
 * Implementation of hook_field_info().
 */
function matrix_field_info() {
  return array(
    'matrix' => array(
      'label' => t('Matrix Field'),
      'description' => t('Creates a grid of form fields.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function matrix_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      drupal_add_js(drupal_get_path('module', 'matrix') .'/matrix.js');
      drupal_add_css(drupal_get_path('module', 'matrix') .'/matrix.css');
      
      //prep the cache with the form elements
      cache_set('matrix-rows-'. $field['field_name'], unserialize($field['rows_elements']));
      cache_set('matrix-cols-'. $field['field_name'], unserialize($field['cols_elements']));
      
      $mode = !empty($field['mode']) ? $field['mode'] : 'cols';
      
      $form['mode'] = array(
        '#type' => 'radios',
        '#title' => t('Rows or columns?'),
        '#options' => array('cols' => t('Columns define element types'), 'rows' => t('Rows define element types')),
        '#default_value' => $mode,
        '#description' => t('You can define element types (eg text fields, select boxes) for each cell in the grid.  Choose if the columns or the rows will decide the element types'),
      );  
      $form['cols'] = array(
        '#type' => 'fieldset',
        '#title' => t('Columns'),
      );
      $form['cols']['list'] = array(
        '#type' => 'markup',
        '#value' => matrix_settings_default('list', $field['field_name'], 'cols', $field['cols_elements']),
        '#prefix' => '<div id="edit-cols-list">',
        '#suffix' => '</div>',
      );
      $form['cols']['add_cols'] = array(
        '#type' => 'button',
        '#value' => t('Add new column'),
        '#attributes' => array('class' => 'matrix-cols'),
      );
      $form['cols']['throbber'] = array(
        '#type' => 'markup',
        '#value' => '<div id="matrix-cols-throbber"></div>',
      );
      $form['cols']['cols_elements'] = array(
        '#type' => 'hidden',
        '#default_value' => matrix_settings_default('data', $field['field_name'], 'cols', $field['cols_elements']),
      );

       $form['rows'] = array(
        '#type' => 'fieldset',
        '#title' => t('Rows'),
      );
      $form['rows']['list'] = array(
        '#type' => 'markup',
        '#value' => matrix_settings_default('list', $field['field_name'], 'rows', $field['rows_elements']),
        '#prefix' => '<div id="edit-rows-list">',
        '#suffix' => '</div>',
      );
      $form['rows']['add_rows'] = array(
        '#type' => 'button',
        '#value' => t('Add new row'),
        '#attributes' => array('class' => 'matrix-rows'),
      );
      $form['rows']['throbber'] = array(
        '#type' => 'markup',
        '#value' => '<div id="matrix-rows-throbber"></div>',
      );
      $form['rows']['rows_elements'] = array(
        '#type' => 'hidden',
        '#default_value' => matrix_settings_default('data', $field['field_name'], 'rows', $field['rows_elements']),
      );

      $form['preview'] = array(
        '#type' => 'fieldset',
        '#title' => t('Preview'),
      );
      $form['preview']['container'] = array(
        '#type' => 'markup',
        '#value' => drupal_get_form('matrix_settings_preview', $field['field_name'], $mode, unserialize($field['rows_elements']), unserialize($field['cols_elements'])),
        '#prefix' => '<div id="matrix-preview">',
        '#suffix' => '</div>',
      );
      return $form;
      
    case 'save':
      cache_clear_all('matrix-rows-'. $field['field_name'], 'cache'); 
      cache_clear_all('matrix-cols-'. $field['field_name'], 'cache'); 
      $values[] = 'mode';
      $values[] = 'rows_elements';
      $values[] = 'cols_elements';
      return $values;
  }
}

/**
 * Build a preview of the element
 * @param $field_name string The  name of the CCK field
 * @param $rows_elements string Serialized array of rows data
 * @param $cols_elements string Serialized array of cols data
 *
 * @return $form_element
 */
function matrix_settings_preview($form_state, $field_name, $mode, $rows_elements, $cols_elements) {
  $form['matrix_preview'] = array(
    '#type' => 'matrix',
    '#title' => t('Preview'),
    '#description' => t('Preview of the matrix field'),
    '#rows_elements' =>  $rows_elements, 
    '#cols_elements' =>  $cols_elements, 
    '#mode' => $mode,
  );
  return $form;
}

/**
 * Creates a formatted list of rows/columns for display on the settings page
 * This list is embalished with javascript
 *
 * @param array $data The definition to process
 * @return HTML markup
 */
function theme_matrix_settings_list($elements, $rc) {
  // Add table javascript.
  drupal_add_js('misc/tableheader.js');
  drupal_add_tabledrag("matrix$rc", 'order', 'sibling', "matrix-settings-$rc-order");

  $header = array(t('Title'), t('Type'), t('Edit'), t('Order'));
  if (!is_array($elements)) {
    return theme('table', $header, $rows, array('id' => "matrix$rc"));
  }
  foreach ($elements as $id => $element) {
    $data = array(  $element['#title'],
                    $element['#type'],
                    "<a href='#' id='matrix-element-$rc-$id' class='matrix-$rc matrix-settings-edit'>Edit</a>",
                    "<div id='$id' class='matrix-settings-$rc-order'>$id</div>",
                  );
  
    $rows[] = array(
      'data' => $data,
      'class' => 'draggable',
    );
  }
  return theme('table', $header, $rows, array('id' => "matrix$rc"));
}


/**
 * Implementation of hook_content_is_empty().
 *
 * As this element does not allow multiple values, this function serves no purpose.
 * but as a compulsary hook, it is defined here.
 */
function matrix_content_is_empty($item, $field) {
  return FALSE;
}

/**
 * Implementation of hook_field().
 */
function matrix_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'load':
      $result = db_query("SELECT value, row, col FROM {node_field_matrix_data} WHERE vid = %d AND field_name = '%s'", $node->vid, $field['field_name']);
      $values = array();
      while ($data = db_fetch_object($result)) {
        $values['data'][$data->row][$data->col] = $data->value;
      }
      $values['rows_elements'] = $field['rows_elements'];
      $values['cols_elements'] = $field['cols_elements'];
      $values['mode'] = $field['mode'];
      $additions = array($field['field_name'] => $values);
      return $additions;
    case 'update':
    case 'delete':
       db_query("DELETE FROM {node_field_matrix_data} WHERE vid = %d and field_name= '%s'", $node->vid, $field['field_name']);
    case 'update':
    case 'insert':
      $rows_elements = unserialize($field['rows_elements']);
      $cols_elements = unserialize($field['cols_elements']);
      foreach ($rows_elements as $i => $row) {
        foreach ($cols_elements as $j => $col) {
          db_query("INSERT INTO {node_field_matrix_data} (nid, vid, field_name, row, col, value)
                     VALUES (%d, %d, '%s', %d, %d, '%s')",
                    $node->nid, $node->vid, $field['field_name'], $i, $j, $items[0][$i][$j]
                  );
        }
      }
      break;
  }
}

/**
 * Implementation of hook_widget_info().
 */
function matrix_widget_info() {
  return array(
    'matrix' => array(
      'label' => t('Form elements in a matrix form'),
      'field types' => array('matrix'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Implementation of hook_widget().
 */
function matrix_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => $items['data'],
  );
  return $element;
}

/**
 * Implementation of hook_theme().
 */
function matrix_theme() {
  return array(
    'matrix_field_settings' => array(
      'arguments' => array('element' => NULL),
    ),
    'matrix_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'matrix_table_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'matrix_settings_list' => array(
      'arguments' => array($elements, $rc),
    )
  );
}

/**
 * Theme the matrix elements into a table
 */
function theme_matrix_table_form($form) {
  $rows = array();
  $header = (array)$form['#header'];
  $first_col = (array)$form['#first_col']; 
  foreach ($form as $row_key => $fields) {
    if (is_numeric($row_key)) { //ignore all other properties
      unset($row);
      $row[] = $first_col[$row_key];
      foreach ($fields as $col_key => $field) {
        if (is_numeric($col_key)) {
          $row[] = drupal_render($form[$row_key][$col_key]);
        }
      }
      $rows[] = $row;
    }
  }
  
  $output = drupal_render($form);
  $output .= theme('table', $header, $rows, array('class' => 'matrix'));
  return theme('form_element', $form, $output);
}

/**
 * Implementation of hook_elements().
 */
function matrix_elements() {
  $elements['matrix'] =  array(
    '#input' => TRUE,
    '#process' => array('matrix_process'),
    '#element_validate' => array('matrix_validate'),
  );
  return $elements;
}

/**
 * Process the matrix type element before displaying the field.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * For CCK, $fields array is in $form['#field_info'][$element['#field_name']].
 */
function matrix_process($element, $edit, &$form_state, $form) {
  //as this element can be used by non-cck modules, data needs to be optionally retrieved directly from the form element
  $field = $form['#field_info'][$element['#field_name']];
  if ($field) {
    $rows = (array)unserialize($field['rows_elements']);
    $cols = (array)unserialize($field['cols_elements']);
    $mode = $field['mode'];
  }
  else {
    $rows = (array)$element['#rows_elements'];
    $cols = (array)$element['#cols_elements'];
    $mode = $element['#mode'];
  }

  //generate column headers
  $header[] = ''; //first must be blank
  foreach ($cols as $col) {
    if ($col['#required'] == TRUE) {
      $header[] = $col['#title'] .'<span class="form-required" title="This field is required.">*</span>';
    }
    else {
      $header[] = $col['#title'];
    }
  }
  
  //generate first column
  foreach ($rows as $row) {
    if ($row['#required'] == TRUE) {
      $first_col[] = $row['#title'] .'<span class="form-required" title="This field is required.">*</span>';
    }
    else {
      $first_col[] = $row['#title'];
    }
  }
  
  $processed_element = array(
    '#tree' => TRUE,
    '#theme' => 'matrix_table_form', 
    '#parents' => $element['#parents'],
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#mode' => $element['#mode'],
    '#element_validate' => $element['#element_validate'],
    '#header' => $header,
    '#first_col' => $first_col
  );

  //build out the appropriate form element
  foreach ($rows as $row_id => $row) {
    foreach ($cols as $col_id => $col) {  
      if ($mode == 'rows') {
        $default = isset($element['#value'][$row_id][$col_id]) ? $element['#value'][$row_id][$col_id] : $element['#rows_elements'][$row_id]['#default_value'];
        $processed_element[$row_id][$col_id] = _matrix_process($row, $default);
      }
      else {
        $default = isset($element['#value'][$row_id][$col_id]) ? $element['#value'][$row_id][$col_id] : $element['#cols_elements'][$col_id]['#default_value'];
        $processed_element[$row_id][$col_id] = _matrix_process($col, $default);
      }
    }
  }

  return $processed_element;
}

/**
 * processes a single form element for display on a node
 *
 * @param $element, the element from the database to be rendered
 * @param $default, the default value to apply
 * @return array, element definition
 */
function _matrix_process($element, $default) {
  switch ($element['#type']) {
    case 'checkbox':
      return array(
        '#type' => 'checkbox',
        '#required' => $element['#required'],
        '#default_value' => $default,
      );
    case 'textfield':
      return array(
        '#type' => 'textfield',
        '#size' => $element['#size'],
        '#required' => $element['#required'],
        '#default_value' => $default,
        '#required' => TRUE,
      );
    case 'radios':
      return array(
        '#type' => 'radios',
        '#required' => $element['#required'],
        '#options' => $element['#options'],
        '#default_value' => $default,
      );
    case 'select':
      return array(
        '#type' => 'select',
        '#required' => $elemet['#required'],
        '#options' => $element['#options'],
        '#default_value' => $default,
      );
    case 'calculation':
      return array(
        '#type' => 'markup',
        '#value' => $element['#calc_method'],
      );
    case 'title':
      return array(
        '#type' => 'markup',
        '#value' => '',
      );
  }
}

/**
 * Validation callback
 * This checks that required fields are filled in.
 * Calls form_error on elements which are not filled in 
 *
 * @param $element The form element to be checked
 * @param $form_state
 * @return $element
 */
function matrix_validate($element, &$form_state) {
  if ($element['#field_name'] == '') { //standard element
    $values = $form_state['values'][$element['#parents'][0]]; //dodgy
  }
  else { //cck element
    $values = $form_state['values'][$element['#parents'][0]][0]; //dodgy
  }
  
  foreach ($element as $row_key => $row) {
    if (is_numeric($row_key)) { //ignore all other properties
      foreach ($row as $col_key => $col) {
        if (is_numeric($col_key)) {
          if ($col['#required'] == TRUE && $values[$row_key][$col_key] == '') {
            form_error($element[$row_key][$col_key], t("Cell at %col x %row is required", array('%row' => strip_tags($element['#first_col'][$row_key]), '%col' => strip_tags($element['#header'][$col_key+1]))));
          }
        }
      }
    }
  }

  return $element;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function matrix_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Title, as matrix (default)'),
      'field types' => array('matrix'),
    ),
  );
}

/**
 * Theme function for 'default' text field formatter.
 * This gets called for each row, but we only want to render all the data at once
 * so we use a staticly cached variable to ignore subsquent calls.
 * @param $element The whole $node object, but containing specific information relating to the delta of this element.
 * @return HTML.
 */
function theme_matrix_formatter_default($element) {
  $field_info = $element['#node']->$element['#field_name'];
  $rows_elements = unserialize($field_info['rows_elements']);
  $cols_elements = unserialize($field_info['cols_elements']);
  $mode = $field_info['mode'];
  
  //if there is no data, just return
  if (!is_array($rows_elements) || !is_array($cols_elements)) {
    return;
  }
  
  foreach ($rows_elements as $row_id => $e) {
    $rows_header[] = $e['#title'];
  }
  
  $header = array('');
  foreach ($cols_elements as $id => $e) {
    $header[] = $e['#title'];
  }
  
  //prepare data for calculation fields
  foreach ($field_info['data'] as $row_id => $row) {
    foreach ($row as $col_id => $value) {
      $calcdata_cols[$col_id][] = $value; 
      $calcdata_rows[$row_id][] = $value; 
    }
  }

  //replace blank cells with a dash
  ksort($field_info['data']);
  foreach ($field_info['data'] as $row_index => $row) { 
    ksort($row);
    foreach ($row as $col_index => $cell_value) {
      $element_type = ($mode == 'rows') ? $rows_elements[$row_index]['#type'] : $cols_elements[$col_index]['#type'];
      
      if ($mode == 'rows') {
       $element_type = $rows_elements[$row_index]['#type'];
       $calc_data = array('calc_method' => $rows_elements[$row_index]['#calc_method'], 'data' =>  $calcdata_cols[$col_index]);
      }
      else {
       $element_type = $cols_elements[$col_index]['#type'];
       $calc_data = array('calc_method' => $cols_elements[$col_index]['#calc_method'], 'data' =>  $calcdata_rows[$row_index]);
      }
      
      $data[$row_index][$col_index] = _matrix_format_cell($element_type, $cell_value, $calc_data);
      if ($data[$row_index][$col_index] != '-') {
        $show_row = $row_index;
      }
    }
    $row_label =  '<b>'. array_shift($rows_header) .'</b>';
    array_unshift($data[$row_index], $row_label); 
  }
  //add blank cells if the number of rows/columns is different to the number of headers
  //this can happen when columns/rows are added to an existing content type
  $row_count = count($data[0]);
  if ($row_count < count($header)) {
    for ($i = $row_count; $i < count($header); $i++) {
      for ($j = 0; $j < count($data); $j++) {
        $data[$j][$i] = '-';
      }
    }
  }

  //strip out rows at the end of the dataset where there is no data
  foreach ($data as $row_id => $row) {
    if ($row_id <= $show_row) {
      $flushed_data[] = $row;
    }
  }

  $output = theme('table', $header, $flushed_data);
  if (user_access('export matrix')) {
    $output .= l(t('Export data'), 'matrix/export/'. $element['#node']->nid .'/'. $element['#field_name']);
  }
  return $output;
}

/**
 * Format cell for display
 * @param $element_type string The type of element in the cell in question
 * @param $cell_value string The value of the cell
 * @param $calc_data array Data used for calculation fields
 *
 * @return Formatted cell
 */
function _matrix_format_cell($element_type, $cell_value, $calc_data = NULL) {
  switch ($element_type) {
    case 'textfield':
    case 'select':
    case 'radios':
    default:
      if ($cell_value == '') {
        return '-';
      }
      else {
        return $cell_value;
      }
    
    case 'checkbox':
      if ($cell_value == 1) {
        return t('Yes');
      }
      else {
        return t('No');
      }
    case 'calculation':
      switch ($calc_data['calc_method']) {
        case 'sum':
          $sum = 0;
          foreach ($calc_data['data'] as $d) {
            if (is_numeric($d)) {
              $sum =+ $d;
            }
          }
          return $sum;
          
        case 'average':
          $sum = 0;
          foreach ($calc_data['data'] as $d) {
            if (is_numeric($d)) {
              $sum =+ $d;
            }
          }
          return round($sum/count($calc_data['data']), 2);
          
        case 'min':
          return min($calc_data['data']);
          
        case 'max':
         // return max($calc_data['data']);
          
        case 'mode':
      
      }
    case 'title':
      return '';
  }
}
/**
 * Implmentation of hook_form_alter()
 *
 * Disable the multiple values settings.  This module won't work with them.
 */
function matrix_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'content_field_edit_form' && $form['#field']['type'] == 'matrix') {
    $form['field']['multiple']['#type'] = 'hidden'; //hide the multiple values form.  It does not work with this module!
    $form['field']['required']['#type'] = 'hidden'; //Required is implemented on a per-field basis
  }
}

/**
 * Menu callback for the export link on matrix fields
 *
 * @param string $nid the Node ID
 * @param string $field_name the name of the field on the node
 * @return csv file with download headers
 */
function matrix_export($nid, $field_name) {
  if (is_numeric($nid)) {
    $node = node_load($nid);
    $field = $node->$field_name;
    foreach ($field['cols_header'] as $index => $value) {
      $field['cols_header'][$index] = trim($value);
    }
    array_unshift($field['cols_header'], '');
    $output .= '"'. implode('", "', $field['cols_header']) ."\"\n";
    
    $i=0;
    foreach ($field['data'] as $row) {
      $output .= '"'. trim($field['rows_header'][$i]) .'", "'. implode('", "', $row) ."\"\n";
      $i++;
    }
    header('Content-type: text/csv');
    header('Content-Disposition: attachment; filename="'. $nid .'-'. $field_name .'.csv"');

    echo $output;
    die();
  }
}