<?php 
// $Id$
/**
 * @file
 *  Agrovoc CCK field
 *  This module provides an CCK field to fetch and store terms from AGROVOC thesaurus
 *  Some portions of code were taken from Content Taxonomy Module and adapted to our objectives.
 */

/**
 * Implementation of hook_menu
 */
function agrovocfield_autocomplete_menu() {
  $items['agrovocfield/autocomplete'] = array(
    'title' => 'Autocomplete',
    'page callback' => 'agrovocfield_autocomplete_load',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  return $items; 
}

/**
 * Retrieve a pipe delimited string of autocomplete suggestions
 * Adapted from content_taxonomy_autocomplete module
 * 
 * @param String Fieldname
 * @param Integer TID of a parent (optional)
 * @param BOOLEAN whether a multiple field or not
 * @param STRING typed input
 */
function agrovocfield_autocomplete_load($field_name, $string = '') {
  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  // This regexp allows the following types of user input:
  // this, "somecmpany, llc", "and ""this"" w,o.rks", foo bar
  global $language;
  $content_type_info = _content_type_info();
  $vid = $content_type_info['fields'][$field_name]['vid'];
  
  // If the menu system has splitted the search text because of slashes, glue it back.
  if (func_num_args() > 2) {
    $args = func_get_args();
    $string .= '/'. implode('/', array_slice($args, 2));
  }
  
  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  $array = drupal_explode_tags($string);

  // Fetch last tag
  $last_string = trim(array_pop($array)); //get last string and leave $array with a value less
  $prefix = count($array) ? '"'. implode('", "', $array) .'", ' : '';
  $matches = array();
  
  if ($last_string != '') {
       //  use agrovoc webservices
      $agrovoc_result = agrovoc_api_simple_search_by_mode2($last_string, 'starting', ',', TRUE, 10, $language->language);
      foreach ($agrovoc_result as $term) {
        $n = $term['term'];
        // Commas and quotes in terms are special cases, so encode 'em.
        if (strpos($term['term'], ',') !== FALSE || strpos($term['term'], '"') !== FALSE) {
          $n = '"'. str_replace('"', '""', $term['term']) .'"';
        }
        $matches[$prefix . $n] = check_plain($term['term']);
      }
   }
   drupal_json($matches);
}

/**
 * Implementation de hook_widget_info().
 */
function agrovocfield_autocomplete_widget_info() {
  return array(
  'agrovocfield_autocomplete' => array(
    'label' => t('Agrovoc Autocomplete'),
    'field types' => array('agrovocfield'),
    // important if you decide to manage multiples values
    'multiple values' => CONTENT_HANDLE_MODULE, 
    'callbacks' => array(
      'default value' => CONTENT_CALLBACK_DEFAULT,
     ),    
   ),
  );
  return $items;  
}

/**
 * Implementation de hook_widgets_settings().
 */
function agrovocfield_autocomplete_widgets_settings($op, $widget) {
  switch ($op) {
    case 'form':
    case 'save': 
  } 
}


/**
 * Implementation de hook_elements().
 */
function agrovocfield_autocomplete_elements() {
  return array(
    'agrovocfield_autocomplete' => array(
      '#input' => TRUE,
      '#columns' => array('value'), 
      '#delta' => 0,
      '#process' => array('agrovocfield_autocomplete_process'),
      ),
    );
}

/**
 * Implementation de hook_widget().
 */
function agrovocfield_autocomplete_widget(&$form, &$form_state, $field, $items, $delta = NULL) {
  $element = array(
    '#type' => 'agrovocfield_autocomplete', 
    '#default_value' => isset($items) ? $items : NULL,
    //set up and show value by default
    '#value_callback' => 'agrovocfield_autocomplete_value',
     '#vid' => $field['vid'],
  ); 
  return $element;
}

/**
 * show values when edit form is opened 
 * 
 * returns the taxonomy term name for term ids
 */
function agrovocfield_autocomplete_value($element, $edit = FALSE) {
  $field_key = $element['#columns'][0];
  $values =  agrovocfield_autocomplete_data2form($element['#default_value']);
  return array($field_key => $values);
}

/**
 * Helper function to transpose the stored values to string format for each language
 * 
 * @param $default_values
 * @return string
 */
function agrovocfield_autocomplete_data2form($default_values) {
    global $language;
    $values = $default_values;
    foreach ($values as $k => $v) {
      //how to show data by default
      $new_values[] =  agrovocfield_set_label_lang(unserialize($v['value']), $language->language);
    }
   $string_values = !is_null($new_values)  ? implode(', ', $new_values) : '';
   return $string_values;
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 */
function agrovocfield_autocomplete_process($element, $edit, $form_state, $form) {
  $field_name = $element['#field_name'];
  $field = $form['#field_info'][$field_name];
  $delta = $element['#delta'];
  $field_key = $element['#columns'][0];
  
  $element['value'] = array(
    '#type' => 'textfield',
    //used if you have implemented hook_validate
    '#default_value' => isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : '', 
    //used if you haven't implemented hook_validate
    //'#default_value' => isset($element['#value'][$delta][$field_key]) ? $element['#value'][$delta][$field_key] : '',  
     '#autocomplete_path' => 'agrovocfield/autocomplete/'. $element['#field_name'],
    '#title' => $element['#title'],
    '#required' => $element['#required'],
    '#description' => $element['#description'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
    '#vid' => $element['#vid'],
  );

  if (empty($element['value']['#element_validate'])) {
    $element['value']['#element_validate'] = array();
  }
  array_unshift($element['value']['#element_validate'], 'agrovocfield_autocomplete_validate');

    if (empty($element['value']['#pre_render'])) {
    $element['value']['#pre_render'] = array();
  }
  array_unshift($element['value']['#pre_render'], 'agrovocfield_autocomplete_pre_render');

  return $element;
}

/**
 * Validation function for the agrovocfield_autocomplete element
 * Adapted from content_taxonomy_autocomplete module
 * parses input, handles new terms (depending on settings) and sets the values as needed for storing the data
 */
function agrovocfield_autocomplete_validate($element, &$form_state) {
  $field_name = $element['#field_name'];
  $field = content_fields($field_name, $element['#type_name']);
  $field_key  = $element['#columns'][0];
  //this segment of code is vital if you want to manage multiples values by yourself!!
    if ($element['#parents'][count($element['#parents'])-1] == 'value') {
    array_pop($element['#parents']);
    array_pop($element['#array_parents']);
    }
  $value = $element['#value'];
  $extracted_ids = agrovocfield_autocomplete_tags_get_tids($value, $field['vid'], $field);
  //example of how to store values
  //$values = array(0 => array('value' => $element['#value'])); 
  $values =  agrovocfield_form2data($extracted_ids, $field, $element);
  form_set_value($element, $values, $form_state);
}

/**
 * Helper function to transpose the values returned by submitting the agrovocfield_autocomplete
 * to the format to be stored in the field
 * Adapted from content_taxonomy_autocomplete module 
 */
function agrovocfield_form2data($extracted_ids, $field, $element) {
  $existing_tids = is_array($extracted_ids['existing_tids']) ? $extracted_ids['existing_tids'] : array();
  $new_tids = array();
  if (is_array($extracted_ids['non_existing_terms'])) {
      $new_tids = agrovocfield_autocomplete_insert_tags($extracted_ids['non_existing_terms']);          
  }
     if ($input_text !== '') {
     $array_values = array_merge($existing_tids, $new_tids); 
     $t = content_transpose_array_rows_cols(array($element['#columns'][0] => $array_values));
     return content_transpose_array_rows_cols(array($element['#columns'][0] => $array_values));
     }
    else {
      return array($element['#columns'][0]  => '');
    }
}

/**
 * Show values by default for each language when form node is opened
 * 
 */
function agrovocfield_autocomplete_pre_render(&$element) {
  if (isset($_GET['translation']) && isset($_GET['language'])) {
    $translation = $_GET['translation'];
    $language = $_GET['language'];
    $values = explode(', ', $element['#value']);
    foreach ($values as $value) {
      $obj = agrovocfield_load_object($value);
      $translation_value[] = agrovocfield_set_label_lang($obj, $language);
    }
    $element['#value'] = implode(', ', $translation_value); 
  }
  elseif (!is_null(arg(1)) && is_numeric(arg(1))) {
    $nid = arg(1);
    $translation_nid = agrovocfield_get_tnid($nid);
    if ($translation_nid  != 0 && $nid != $translation_nid && is_numeric($translation_nid )) {
        #$element['#attributes']['disabled'] = TRUE;
        $element['#attributes']['readonly'] = TRUE;
        global $language;
        $translation_node = node_load($translation_nid);
        $translation_field = $translation_node->$element['#field_name'];
        foreach ($translation_field as $k => $v) {
          $obj_value = unserialize($v['value']);
          $new_input[] = agrovocfield_set_label_lang($obj_value, $language->language );
        }
        $element['#value'] = implode(', ', $new_input); 
     }
  }
  return $element;
}

/**
 * Implementation of hook_theme().
 */
function agrovocfield_autocomplete_theme() {
  return array(
    'agrovocfield_autocomplete' => array(
      'arguments' => array('element' => NULL),
    ),
  ); 
}


function theme_agrovocfield_autocomplete($element) {
  return $element['#children'];
}

/**
 * Get TIDs for freetagging tags
 * Free tagging vocabularies do not send their tids in the form,
 * so we'll detect them here and process them independently.
 * Taken and adapted from content_taxonomy_autocomplete module
 * @param $typed_input 
 * A string containing all comma separated tags. As the user typed it.
 * @param integer $vid
 * vocabulary id
 * @param integer $parent
 * parent of terms
 * @return array of terms
 */
function agrovocfield_autocomplete_tags_get_tids($typed_input, $vid, $parent = 0) {
  // This regexp allows the following types of user input:
  // this, "somecmpany, llc", "and ""this"" w,o.rks", foo bar
  $typed_terms = agrovocfield_autocomplete_split_tags($typed_input);

  foreach ($typed_terms as $typed_term) {
    // If a user has escaped a term (to demonstrate that it is a group,
    // or includes a comma or quote character), we remove the escape
    // formatting so to save the term into the DB as the user intends.
    $typed_term = trim(str_replace('""', '"', preg_replace('/^"(.*)"$/', '\1', $typed_term)));
    if ($typed_term == "") { 
          continue; }
    // See if the term exists in the chosen vocabulary
    // and return the tid, otherwise, add a new record. 
    // always return one value
    $possibilities = agrovocfield_get_term_by_name_and_by_vid($typed_term, $vid);
    // tid match if any. 
    $typed_term_tid = NULL; 
    
    foreach ($possibilities as $possibility) {
      $result['existing_tids'][] = serialize(agrovocfield_load_object($possibility->name));
      $typed_term_tid = $possibility->tid;
      }
    if (!$typed_term_tid) {
      $result['non_existing_terms'][] = array(
        'name' => $typed_term,
        'vid' => $vid,
      );
    }
  }

  return $result;
}

/**
 * Insert new tags
 * Adapted from content_taxonomy_autocomplete module 
 
 * @param array $terms 
 * an array of all <strong>nonexisting</strong> terms.
 * @param integer $parent
 * parent of terms
 * @return 
 * an array of newly inserted term ids
 */
function agrovocfield_autocomplete_insert_tags($terms, $parent = NULL) {
  module_load_include('inc', 'i18ntaxonomy', 'i18ntaxonomy.admin');
  foreach ($terms as $term) {
    $obj = agrovocfield_load_object($term['name']);
    $trid =  i18ntaxonomy_next_trid();
    $vid = $term['vid'];
    $labels = $obj->labels;
    foreach ( $labels as $lang => $value) {
        $edit = array(
        'name' => $value,
        'vid' => $vid,
        'language' => $lang,
        'trid' => $trid,
        );
    taxonomy_save_term($edit); 
    }
    $saved_terms[$trid] =serialize($obj);
  }
  return $saved_terms;
}


/**
 * Helper function to split the tags
 */
function agrovocfield_autocomplete_split_tags($typed_input) {
  $regexp = '%(?:^|,\ *)("(?>[^"]*)(?>""[^"]* )*"|(?: [^",]*))%x';
  preg_match_all($regexp, $typed_input, $matches);
  return $matches[1];
}
